// Generated by view binder compiler. Do not edit!
package com.example.messenger_berry.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.messenger_berry.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ToolBarBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView toolBarExitApp;

  @NonNull
  public final ImageView toolBarSendMessage;

  @NonNull
  public final TextView toolBarTitle;

  @NonNull
  public final ImageView toolBarUserProfile;

  private ToolBarBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView toolBarExitApp,
      @NonNull ImageView toolBarSendMessage, @NonNull TextView toolBarTitle,
      @NonNull ImageView toolBarUserProfile) {
    this.rootView = rootView;
    this.toolBarExitApp = toolBarExitApp;
    this.toolBarSendMessage = toolBarSendMessage;
    this.toolBarTitle = toolBarTitle;
    this.toolBarUserProfile = toolBarUserProfile;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ToolBarBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ToolBarBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.tool_bar, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ToolBarBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.toolBar_exitApp;
      ImageView toolBarExitApp = ViewBindings.findChildViewById(rootView, id);
      if (toolBarExitApp == null) {
        break missingId;
      }

      id = R.id.toolBar_sendMessage;
      ImageView toolBarSendMessage = ViewBindings.findChildViewById(rootView, id);
      if (toolBarSendMessage == null) {
        break missingId;
      }

      id = R.id.toolBar_title;
      TextView toolBarTitle = ViewBindings.findChildViewById(rootView, id);
      if (toolBarTitle == null) {
        break missingId;
      }

      id = R.id.toolBar_userProfile;
      ImageView toolBarUserProfile = ViewBindings.findChildViewById(rootView, id);
      if (toolBarUserProfile == null) {
        break missingId;
      }

      return new ToolBarBinding((ConstraintLayout) rootView, toolBarExitApp, toolBarSendMessage,
          toolBarTitle, toolBarUserProfile);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
